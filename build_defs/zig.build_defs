""" Rules to build Zig code.

Zig is very much a single binary distribution with a 
"""
def zig_toolchain(name:str, url:str|dict='', version:str='', hashes:list=[], labels:list=[], visibility:list=["PUBLIC"]):
    """
    Downloads Zig and exposes :<name>|zig, :<name>|fmt as entry points. 

    Args:
        name (str): Name of the rule.
        url (str | dict): The URL used to Download Zig. Can be a single string or a dictionary mapping.
        version (str): The version of Zig to download. Zig will be downloaded htp https://ziglang.org/download/...
                       and the ryle will use hte current platform's OS and architecture setting. Either provide
                       url or version, but not both.
        hashes (list): A list of possible hashes for the downloaded archive. Optional.
        visibility (list): Visibility specfication. Defaults to public. 
        labels (list): Labels for this rule.
    """

    if url and version: 
        fail("Either version or url should be provided for both")
    
    if version:
        sdk_url = f'https://ziglang.org/download/{version}/zig-{CONFIG.HOSTARCH}-{CONFIG.HOSTOS}-{version}.tar.xz'
    else:
        # TODO: finish this
        sdk_url = url if isinstance(url, str) else url[f'{CONFIG.HOSTARCH}-{CONFIG.HOSTOS}']
        version = sdk_url.split('-')

    download = remote_file(
        name = name,
        _tag = 'download',
        url = sdk_url,
        hashes = hashes,
    )

    out_folder = f'zig-{CONFIG.HOSTARCH}-{CONFIG.HOSTOS}-{version}'

    tc = build_rule(
        name = name, 
        srcs = [download],
        cmd = f'tar -xf $SRCS && mv {out_folder} $OUT',
        outs = [name],
        entry_points = {
            'zig': f'{name}/zig',
        },
        binary = True,
        labels = labels,
        visibility = visibility,
        building_description = 'Installing...',
    )

    # for tool in ['compile', 'link', 'test' ]:
    #     genrule(
    #         name = f'{name}_{tool}',
    #         binary = True,
    #         output_is_complete = True,
    #         tools = [f"{tc}|{tool}"],
    #         visibility = visibility,
    #     )
    return tc 


def zig_binary(name:str, srcs:list, deps:list=[], visibility:list):     
    # return genrule(
    #     name = name,
    #     srcs = srcs, 
    #     visibility = visibility,
    # )
    pass

def zig_library(name:str, srcs:list, deps:list=[], labels:list=[], visibility:list):
    """ Generates a Zig library

    Args:
        name (str): Name of the rule.
        srcs (list): Zig source files to compile.
        deps (list): A list of dependencies.
        labels (list): Labels for this rule.
        visibility (list): Visibility specification.
    """
    return build_rule(
        name = name,
        srcs = srcs,
        cmd = f'',
        tools = 'zig',
        out = [name + '.a'],
        deps = deps,
        labels = labels,
        visibility = visibility,
        requires = ['zig'],
    )

def zig_test(name:str, srcs:list, visibility:list):
    # return gentest(
    #     name = name, 
    #     srcs = srcs, 
    #     cmd = f'',
    #     tools = 'zig',
    #     out = [name + '.a'],
    #     deps = deps,
    #     visibility = visibility,
    # )
    pass