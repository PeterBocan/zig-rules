""" Rules to build Zig code.

Zig is very much a single binary distribution with a fairly unopinionated single-binary distribution containing
compiler, linker, and can compiler a lot of different code.
"""
def zig_toolchain(name:str, url:str|dict='', version:str='', hashes:list=[], labels:list=[], visibility:list=["PUBLIC"]):
    """
    Downloads Zig and exposes :<name>|zig, :<name>|fmt as entry points. 

    Args:
        name (str): Name of the rule.
        url (str | dict): The URL used to Download Zig. Can be a single string or a dictionary mapping.
        version (str): The version of Zig to download. Zig will be downloaded htp https://ziglang.org/download/...
                       and the ryle will use hte current platform's OS and architecture setting. Either provide
                       url or version, but not both.
        hashes (list): A list of possible hashes for the downloaded archive. Optional.
        visibility (list): Visibility specfication. Defaults to public. 
        labels (list): Labels for this rule.
    """

    if url and version: 
        fail("Either version or url should be provided for both")
    
    arch = 'aarch64'
    os = 'macos'

    if version:
        # Zig calls it "macos" instead of "darwin", so some manual work is necessary
        # TODO: fix this
        sdk_url = f'https://ziglang.org/download/{version}/zig-{arch}-{os}-{version}.tar.xz'
    else:
        # TODO: finish this
        sdk_url = url if isinstance(url, str) else url[f'{CONFIG.HOSTARCH}-{CONFIG.HOSTOS}']
        version = sdk_url.split('-')

    download = remote_file(
        name = name,
        _tag = 'download',
        url = sdk_url,
        hashes = hashes,
    )

    out_folder = f'zig-{arch}-{os}-{version}'

    tc = build_rule(
        name = name, 
        srcs = [download],
        cmd = f'tar -xf $SRCS && mv {out_folder} $OUT',
        outs = [name],
        entry_points = {
            'zig': f'{name}/zig',
            'stdlib': f'{name}/lib',
        },
        binary = True,
        labels = labels,
        visibility = visibility,
        building_description = 'Installing...',
    )

    export_file(
        name = f"{name}_compiler",
        src = f"{tc}|zig",
        visibility = visibility,
        binary = True,
    )

    filegroup(
        name = f"{name}_stdlib",
        srcs = [f"{tc}|stdlib"],
        output_is_complete = True, 
        visibility = visibility,
    )

    return tc 


def zig_binary(name:str, srcs:list, deps:list=[], labels:list=[], compiler_flags:list=[],
               linker_flags:list=[], debug_flags:list=[], visibility:list):
    """ Compile a Zig binary.

    Args:
        name (str): Name of the rule.
        srcs (list): Zig source files to compile.
        deps (list): A list of dependencies.
        labels (list): Labels for this rule.
        compiler_flags (list): A list of flags to pass to the compiler.
        linker_flags (list): A list of flags to pass to the compiler.
        debug_flags (list): A list of debug flags to pass to the compiler.
        visibility (list): Visibility specification.
    """
    cmds, tools = _binary_cmds(name, compiler_flags, linker_flags, debug_flags)
    if srcs:
        lib_rule = zig_library(
            name = f'_{name}#lib',
            srcs = srcs, 
            deps = deps,
            visibility = visibility,
        )
        deps += [lib_rule]

    return build_rule(
        name = name, 
        outs = [name],
        deps = deps,
        visibility = visibility,
        cmd = cmds, 
        building_description = 'Linking...',
        labels = labels,
        tools = tools,
        binary = True, 
        output_is_complete = True,
        needs_transitive_deps = True,
        requires = ['zig'], 
    )

def zig_library(name:str, srcs:list, deps:list=[], labels:list=[], compiler_flags:list=[],
                linker_flags:list=[], debug_flags:list=[], visibility:list):
    """ Generates a Zig library.

    Args:
        name (str): Name of the rule.
        srcs (list): Zig source files to compile.
        deps (list): A list of dependencies.
        labels (list): Labels for this rule. 
        compiler_flags (list): A list of flags to pass to the compiler.
        linker_flags (list): A list of flags to pass to the compiler.
        debug_flags (list): A list of debug flags to pass to the compiler.
        visibility (list): Visibility specification.
    """
    cmds, tools = _library_cmds(name, compiler_flags, linker_flags, debug_flags)

    return build_rule(
        name = name, 
        srcs = srcs,
        outs = ['lib' + name + '.a'],
        deps = deps,
        visibility = visibility,
        cmd = cmds, 
        building_description = 'Compiling...',
        labels = labels,
        tools = tools,
        binary = True, 
        output_is_complete = True,
        needs_transitive_deps = True,
        requires = ['zig'], 
    ) 

def zig_test(name:str, srcs:list, visibility:list):
    # return gentest(
    #     name = name, 
    #     srcs = srcs, 
    #     cmd = f'',
    #     tools = 'zig',
    #     out = [name + '.a'],
    #     deps = deps,
    #     visibility = visibility,
    # )
    pass

def _library_cmds(name:str, compiler_flags:list, linker_flags:list, debug_flags:list):
    tools = { 'zig': CONFIG.ZIG.ZIG_COMPILER }

    comp_flags = ' '.join(compiler_flags)
    dbg_flags  = ' '.join(debug_flags)

    cmds = {
        'dbg': f'$TOOLS_ZIG build-lib {dbg_flags} $SRCS --name {name}', 
        'opt': f'$TOOLS_ZIG build-lib {comp_flags} $SRCS --name {name}',
    }
    return cmds, tools


def _binary_cmds(name:str, compiler_flags:list, linker_flags:list, debug_flags:list): 
    tools = { 'zig': CONFIG.ZIG.ZIG_COMPILER }

    link_flags = ' '.join(linker_flags)
    comp_flags = ' '.join(compiler_flags)
    dbg_flags  = ' '.join(debug_flags)
    find_libs = 'LIBS=$(find . -name "*.a" -or -name "*.o")'
    cmds = {
        'dbg': f'{find_libs} && $TOOLS_ZIG build-exe {dbg_flags} {link_flags} $LIBS --name {name}', 
        'opt': f'{find_libs} && $TOOLS_ZIG build-exe {comp_flags} {link_flags} $LIBS --name {name}',
    }
    return cmds, tools

def _default_compile_flags(dbg=False):
    return CONFIG.ZIG.DEFAULT_DBG_FLAGS if dbg else CONFIG.ZIG.DEFAULT_OPT_FLAGS
